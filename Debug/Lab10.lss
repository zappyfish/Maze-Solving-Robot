
Lab10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000af6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a82  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000147  00800100  00800100  00000af6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000af6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000b68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016b2  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fc  00000000  00000000  0000235a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb8  00000000  00000000  00002c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00003b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064a  00000000  00000000  00003d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079a  00000000  00000000  0000437e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00004b18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 34       	cpi	r26, 0x47	; 71
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 34 02 	call	0x468	; 0x468 <main>
  9e:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_default>

000000a6 <__vector_11>:
	}
	else {
		OCR0B = pwmspeed;
	}
	if(portd3) {
		OCR2B = 0;
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	87 b9       	out	0x07, r24	; 7
  ba:	18 b8       	out	0x08, r1	; 8
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <__vector_4>:
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
  da:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  de:	86 b1       	in	r24, 0x06	; 6
  e0:	8f 71       	andi	r24, 0x1F	; 31
  e2:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <leds>
  e6:	45 98       	cbi	0x08, 5	; 8
  e8:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <leds>
  ec:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <sensors>
  f0:	89 27       	eor	r24, r25
  f2:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <leds>
  f6:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <leds>
  fa:	97 b1       	in	r25, 0x07	; 7
  fc:	89 2b       	or	r24, r25
  fe:	87 b9       	out	0x07, r24	; 7
 100:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <leds>
 104:	98 b1       	in	r25, 0x08	; 8
 106:	80 95       	com	r24
 108:	89 23       	and	r24, r25
 10a:	88 b9       	out	0x08, r24	; 8
 10c:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <leds>
 110:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <sensors>
 114:	89 27       	eor	r24, r25
 116:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <sensors>
 11a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 11e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 122:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <myTime+0x1>
 126:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <myTime>
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <whichOneCount>
 130:	80 e1       	ldi	r24, 0x10	; 16
 132:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <compareVal>
 136:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <compareVal>
 13a:	88 23       	and	r24, r24
 13c:	31 f1       	breq	.+76     	; 0x18a <__vector_4+0xc2>
 13e:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <compareVal>
 142:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <leds>
 146:	89 23       	and	r24, r25
 148:	91 f0       	breq	.+36     	; 0x16e <__vector_4+0xa6>
 14a:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <whichOneCount>
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <myTime>
 154:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <myTime+0x1>
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	e3 59       	subi	r30, 0x93	; 147
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	91 83       	std	Z+1, r25	; 0x01
 162:	80 83       	st	Z, r24
 164:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <done>
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <done>
 16e:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <compareVal>
 172:	86 95       	lsr	r24
 174:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <compareVal>
 178:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <whichOneCount>
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <whichOneCount>
 182:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <compareVal>
 186:	81 11       	cpse	r24, r1
 188:	da cf       	rjmp	.-76     	; 0x13e <__vector_4+0x76>
 18a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <done>
 18e:	85 30       	cpi	r24, 0x05	; 5
 190:	21 f0       	breq	.+8      	; 0x19a <__vector_4+0xd2>
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 198:	45 9a       	sbi	0x08, 5	; 8
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_default>:
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <pwmOn>:
 1c0:	83 ef       	ldi	r24, 0xF3	; 243
 1c2:	84 bd       	out	0x24, r24	; 36
 1c4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 1c8:	08 95       	ret

000001ca <pwmOff>:
 1ca:	14 bc       	out	0x24, r1	; 36
 1cc:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 1d0:	08 95       	ret

000001d2 <forward>:
 1d2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 1d6:	17 bc       	out	0x27, r1	; 39
 1d8:	88 bd       	out	0x28, r24	; 40
 1da:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 1de:	08 95       	ret

000001e0 <turnRight>:
 1e0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 1e4:	17 bc       	out	0x27, r1	; 39
 1e6:	88 bd       	out	0x28, r24	; 40
 1e8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 1ec:	08 95       	ret

000001ee <turnLeft>:
 1ee:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 1f2:	87 bd       	out	0x27, r24	; 39
 1f4:	18 bc       	out	0x28, r1	; 40
 1f6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 1fa:	08 95       	ret

000001fc <brake>:
void backward(uint8_t spd) {
	moveMotors(0,1,1,0, spd);
}

void brake(void) {
	PORTD |= 0b01101000;
 1fc:	8b b1       	in	r24, 0x0b	; 11
 1fe:	88 66       	ori	r24, 0x68	; 104
 200:	8b b9       	out	0x0b, r24	; 11
	PORTB |= 0b00001000;
 202:	2b 9a       	sbi	0x05, 3	; 5
 204:	08 95       	ret

00000206 <configPWM>:
}

void configPWM(void) {
	DDRB |= 0b00001000;
 206:	23 9a       	sbi	0x04, 3	; 4
	DDRD |= 0b01101000;
 208:	8a b1       	in	r24, 0x0a	; 10
 20a:	88 66       	ori	r24, 0x68	; 104
 20c:	8a b9       	out	0x0a, r24	; 10
	TCCR0B = 0b00000001;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	85 bd       	out	0x25, r24	; 37
	TCCR2B = 0b00000001;
 212:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TIMSK0 = 0b00000110;
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TIMSK2 = 0b00000110;
 21c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 220:	08 95       	ret

00000222 <setUpCaps>:
}

void setUpCaps(void) {
	DDRC = 0b00011111;
 222:	8f e1       	ldi	r24, 0x1F	; 31
 224:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00011111;
 226:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	80 e1       	ldi	r24, 0x10	; 16
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <setUpCaps+0x8>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <setUpCaps+0xe>
	_delay_us(50); // wait for them to charge
	DDRC = 0b00100000; // turn portc to input 
 230:	80 e2       	ldi	r24, 0x20	; 32
 232:	87 b9       	out	0x07, r24	; 7
 234:	08 95       	ret

00000236 <configTimer1>:
}

void configTimer1(void) {
	TCCR1B = 0; // stop the clock
 236:	e1 e8       	ldi	r30, 0x81	; 129
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	10 82       	st	Z, r1
	TCCR1C = 0;
 23c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	TCCR1A = (1<<COM1A1) | (0<<COM1A0); // setup output compare on OC reg A
 240:	80 e8       	ldi	r24, 0x80	; 128
 242:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TIMSK1 = 0; // clear TC int mask reg
 246:	af e6       	ldi	r26, 0x6F	; 111
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	1c 92       	st	X, r1
	TCNT1 = 0;
 24c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 250:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	OCR1A = 0x0A00;
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	9a e0       	ldi	r25, 0x0A	; 10
 258:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 25c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	
	TIFR1 = 0x00;
 260:	16 ba       	out	0x16, r1	; 22
	TIMSK1 = 0b00000010; // turn on output compare a interrupt
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	8c 93       	st	X, r24
	
	TCCR1B = (0<<CS12)|(1<<CS11)|(0<<CS10); // start the clock
 266:	80 83       	st	Z, r24
 268:	08 95       	ret

0000026a <configPCI>:
	
}

void configPCI(void) {
	PCIFR &= ~(1<<PCIF1); // clear interrupt flag
 26a:	d9 98       	cbi	0x1b, 1	; 27
	PCMSK1 = 0b00011111;
 26c:	8f e1       	ldi	r24, 0x1F	; 31
 26e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	PCICR = (1<<PCIE1); // enable pin change interrupts on port C
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 278:	08 95       	ret

0000027a <setUpSensing>:
}

void setUpSensing(void) {
	done = 0;
 27a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <done>
	lightdark = 0;
 27e:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <lightdark>
	sensors = 0b00011111; // all sensors are on initially
 282:	8f e1       	ldi	r24, 0x1F	; 31
 284:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <sensors>
	PCIFR &= ~(1<<PCIF1); // clear interrupt flag	sensors = 0b00011111; // all sensors are on
 288:	d9 98       	cbi	0x1b, 1	; 27
	setUpCaps();
 28a:	0e 94 11 01 	call	0x222	; 0x222 <setUpCaps>
	configPCI();
 28e:	0e 94 35 01 	call	0x26a	; 0x26a <configPCI>
	configTimer1();
 292:	0e 94 1b 01 	call	0x236	; 0x236 <configTimer1>
	DDRC |= 0b00100000;
 296:	3d 9a       	sbi	0x07, 5	; 7
	PORTC |= 0b00100000; // turn on the LEDs
 298:	45 9a       	sbi	0x08, 5	; 8
	sei(); // enable interrupts
 29a:	78 94       	sei
 29c:	08 95       	ret

0000029e <testThreshold>:


// this function checks to see whether each sensor was over light
// or dark
void testThreshold() {
	TCCR1B = 0x00; // turn off the clock
 29e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	lightdark = 0x00;
 2a2:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <lightdark>
	uint8_t index = 0b00010000;
	for(uint8_t i = 4; index; --i) { 
 2a6:	84 e0       	ldi	r24, 0x04	; 4
// this function checks to see whether each sensor was over light
// or dark
void testThreshold() {
	TCCR1B = 0x00; // turn off the clock
	lightdark = 0x00;
	uint8_t index = 0b00010000;
 2a8:	90 e1       	ldi	r25, 0x10	; 16
	for(uint8_t i = 4; index; --i) { 
		if(times[i] < LD_THRESH) {
 2aa:	e8 2f       	mov	r30, r24
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	ee 0f       	add	r30, r30
 2b0:	ff 1f       	adc	r31, r31
 2b2:	e3 59       	subi	r30, 0x93	; 147
 2b4:	fe 4f       	sbci	r31, 0xFE	; 254
 2b6:	20 81       	ld	r18, Z
 2b8:	31 81       	ldd	r19, Z+1	; 0x01
 2ba:	21 15       	cp	r18, r1
 2bc:	37 40       	sbci	r19, 0x07	; 7
 2be:	28 f4       	brcc	.+10     	; 0x2ca <testThreshold+0x2c>
		lightdark |= index;
 2c0:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <lightdark>
 2c4:	29 2b       	or	r18, r25
 2c6:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <lightdark>
		}
		index = index >> 1; // shift the index for the next sensor
 2ca:	96 95       	lsr	r25
// or dark
void testThreshold() {
	TCCR1B = 0x00; // turn off the clock
	lightdark = 0x00;
	uint8_t index = 0b00010000;
	for(uint8_t i = 4; index; --i) { 
 2cc:	81 50       	subi	r24, 0x01	; 1
 2ce:	68 f7       	brcc	.-38     	; 0x2aa <testThreshold+0xc>
		if(times[i] < LD_THRESH) {
		lightdark |= index;
		}
		index = index >> 1; // shift the index for the next sensor
	}
	lightdark = ((~lightdark)&0b00011111);
 2d0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 2d4:	80 95       	com	r24
 2d6:	8f 71       	andi	r24, 0x1F	; 31
 2d8:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <lightdark>
 2dc:	08 95       	ret

000002de <checkIfDone>:
	testThreshold();
	checkIfDone();
}

void checkIfDone() {
	if((lightdark & 0b00001110) == 0b00001110 && (lightdark != 0b00011111)) {
 2de:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 2e2:	8e 70       	andi	r24, 0x0E	; 14
 2e4:	8e 30       	cpi	r24, 0x0E	; 14
 2e6:	51 f4       	brne	.+20     	; 0x2fc <checkIfDone+0x1e>
 2e8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 2ec:	8f 31       	cpi	r24, 0x1F	; 31
 2ee:	31 f0       	breq	.+12     	; 0x2fc <checkIfDone+0x1e>
		++doneCounter;
 2f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <checkIfDone+0x22>
	}
	else {
		doneCounter = 0;
 2fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	}
	if(doneCounter >= 80) {
 300:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 304:	80 35       	cpi	r24, 0x50	; 80
 306:	38 f0       	brcs	.+14     	; 0x316 <checkIfDone+0x38>
		solved = 2;
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <solved>
		pwmOff();
 30e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <pwmOff>
		brake();
 312:	0e 94 fe 00 	call	0x1fc	; 0x1fc <brake>
 316:	08 95       	ret

00000318 <getLightDark>:
	}
	lightdark = ((~lightdark)&0b00011111);
}

void getLightDark(void) {
	setUpSensing(); // set up sensing here lol
 318:	0e 94 3d 01 	call	0x27a	; 0x27a <setUpSensing>
	while(1) {
		if(done == 5) {
 31c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <done>
 320:	85 30       	cpi	r24, 0x05	; 5
 322:	e1 f7       	brne	.-8      	; 0x31c <getLightDark+0x4>
			cli();
 324:	f8 94       	cli
			break;
		}
	}
	testThreshold();
 326:	0e 94 4f 01 	call	0x29e	; 0x29e <testThreshold>
	checkIfDone();
 32a:	0e 94 6f 01 	call	0x2de	; 0x2de <checkIfDone>
 32e:	08 95       	ret

00000330 <convertTurns>:
		pwmOff();
		brake();
	}
}

uint8_t * convertTurns(uint8_t * pre, int numTurns, int *postTurns) {
 330:	cf 92       	push	r12
 332:	df 92       	push	r13
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	c4 56       	subi	r28, 0x64	; 100
 346:	d1 09       	sbc	r29, r1
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	f8 94       	cli
 34c:	de bf       	out	0x3e, r29	; 62
 34e:	0f be       	out	0x3f, r0	; 63
 350:	cd bf       	out	0x3d, r28	; 61
 352:	da 01       	movw	r26, r20
	uint8_t post[100];
	while(numTurns >= 3) {
 354:	63 30       	cpi	r22, 0x03	; 3
 356:	71 05       	cpc	r23, r1
 358:	0c f4       	brge	.+2      	; 0x35c <convertTurns+0x2c>
 35a:	53 c0       	rjmp	.+166    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
				if(three == 0) { //SUL = right
					three = 3;
				}
			
		}
		post[99-*postTurns] = three;
 35c:	43 e6       	ldi	r20, 0x63	; 99
 35e:	50 e0       	ldi	r21, 0x00	; 0
					three = 3;
				}
			}
			else if(one == 2) { // straight
				if(three == 0) { //SUL = right
					three = 3;
 360:	0f 2e       	mov	r0, r31
 362:	f3 e0       	ldi	r31, 0x03	; 3
 364:	ff 2e       	mov	r15, r31
 366:	f0 2d       	mov	r31, r0
		if(two == 1) {
			// u- turn
			if(one == 0) { // left
				if(three == 0) {
					// LUL = straight
					three = 2;
 368:	68 94       	set
 36a:	ee 24       	eor	r14, r14
 36c:	e1 f8       	bld	r14, 1
}

uint8_t * convertTurns(uint8_t * pre, int numTurns, int *postTurns) {
	uint8_t post[100];
	while(numTurns >= 3) {
		uint8_t one = pre[numTurns -1];
 36e:	9c 01       	movw	r18, r24
 370:	26 0f       	add	r18, r22
 372:	37 1f       	adc	r19, r23
 374:	f9 01       	movw	r30, r18
 376:	31 97       	sbiw	r30, 0x01	; 1
 378:	00 81       	ld	r16, Z
		uint8_t two = pre[numTurns -2];
		uint8_t three = pre[numTurns -3];
 37a:	32 97       	sbiw	r30, 0x02	; 2
 37c:	10 81       	ld	r17, Z

uint8_t * convertTurns(uint8_t * pre, int numTurns, int *postTurns) {
	uint8_t post[100];
	while(numTurns >= 3) {
		uint8_t one = pre[numTurns -1];
		uint8_t two = pre[numTurns -2];
 37e:	31 96       	adiw	r30, 0x01	; 1
		uint8_t three = pre[numTurns -3];
		
		
		if(two == 1) {
 380:	20 81       	ld	r18, Z
 382:	21 30       	cpi	r18, 0x01	; 1
 384:	29 f5       	brne	.+74     	; 0x3d0 <convertTurns+0xa0>
			// u- turn
			if(one == 0) { // left
 386:	01 11       	cpse	r16, r1
 388:	06 c0       	rjmp	.+12     	; 0x396 <convertTurns+0x66>
				if(three == 0) {
 38a:	11 23       	and	r17, r17
 38c:	51 f0       	breq	.+20     	; 0x3a2 <convertTurns+0x72>
					// LUL = straight
					three = 2;
				}
				else if (three == 2) {
 38e:	12 30       	cpi	r17, 0x02	; 2
 390:	49 f4       	brne	.+18     	; 0x3a4 <convertTurns+0x74>
					// LUS
					three = 3;
 392:	1f 2d       	mov	r17, r15
 394:	07 c0       	rjmp	.+14     	; 0x3a4 <convertTurns+0x74>
				}
			}
			else if(one == 2) { // straight
 396:	02 30       	cpi	r16, 0x02	; 2
 398:	29 f4       	brne	.+10     	; 0x3a4 <convertTurns+0x74>
				if(three == 0) { //SUL = right
 39a:	11 11       	cpse	r17, r1
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <convertTurns+0x74>
					three = 3;
 39e:	1f 2d       	mov	r17, r15
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <convertTurns+0x74>
		if(two == 1) {
			// u- turn
			if(one == 0) { // left
				if(three == 0) {
					// LUL = straight
					three = 2;
 3a2:	1e 2d       	mov	r17, r14
				if(three == 0) { //SUL = right
					three = 3;
				}
			
		}
		post[99-*postTurns] = three;
 3a4:	2d 91       	ld	r18, X+
 3a6:	3c 91       	ld	r19, X
 3a8:	11 97       	sbiw	r26, 0x01	; 1
 3aa:	fa 01       	movw	r30, r20
 3ac:	e2 1b       	sub	r30, r18
 3ae:	f3 0b       	sbc	r31, r19
 3b0:	cc 24       	eor	r12, r12
 3b2:	c3 94       	inc	r12
 3b4:	d1 2c       	mov	r13, r1
 3b6:	cc 0e       	add	r12, r28
 3b8:	dd 1e       	adc	r13, r29
 3ba:	ec 0d       	add	r30, r12
 3bc:	fd 1d       	adc	r31, r13
 3be:	10 83       	st	Z, r17
			(*postTurns)++;
 3c0:	2f 5f       	subi	r18, 0xFF	; 255
 3c2:	3f 4f       	sbci	r19, 0xFF	; 255
 3c4:	11 96       	adiw	r26, 0x01	; 1
 3c6:	3c 93       	st	X, r19
 3c8:	2e 93       	st	-X, r18
			numTurns-= 3;
 3ca:	63 50       	subi	r22, 0x03	; 3
 3cc:	71 09       	sbc	r23, r1
 3ce:	15 c0       	rjmp	.+42     	; 0x3fa <convertTurns+0xca>
		}
		else { // if no u-turns, put all of them in the post array
			post[99 - *postTurns] = three;
 3d0:	2d 91       	ld	r18, X+
 3d2:	3c 91       	ld	r19, X
 3d4:	11 97       	sbiw	r26, 0x01	; 1
 3d6:	fa 01       	movw	r30, r20
 3d8:	e2 1b       	sub	r30, r18
 3da:	f3 0b       	sbc	r31, r19
 3dc:	cc 24       	eor	r12, r12
 3de:	c3 94       	inc	r12
 3e0:	d1 2c       	mov	r13, r1
 3e2:	cc 0e       	add	r12, r28
 3e4:	dd 1e       	adc	r13, r29
 3e6:	ec 0d       	add	r30, r12
 3e8:	fd 1d       	adc	r31, r13
 3ea:	10 83       	st	Z, r17
			(*postTurns)++;
 3ec:	2f 5f       	subi	r18, 0xFF	; 255
 3ee:	3f 4f       	sbci	r19, 0xFF	; 255
 3f0:	11 96       	adiw	r26, 0x01	; 1
 3f2:	3c 93       	st	X, r19
 3f4:	2e 93       	st	-X, r18
			numTurns--;
 3f6:	61 50       	subi	r22, 0x01	; 1
 3f8:	71 09       	sbc	r23, r1
	}
}

uint8_t * convertTurns(uint8_t * pre, int numTurns, int *postTurns) {
	uint8_t post[100];
	while(numTurns >= 3) {
 3fa:	63 30       	cpi	r22, 0x03	; 3
 3fc:	71 05       	cpc	r23, r1
 3fe:	0c f0       	brlt	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	b6 cf       	rjmp	.-148    	; 0x36e <convertTurns+0x3e>
			post[99 - *postTurns] = three;
			(*postTurns)++;
			numTurns--;
		}
	}
	while(numTurns > 0) {
 402:	16 16       	cp	r1, r22
 404:	17 06       	cpc	r1, r23
 406:	f4 f4       	brge	.+60     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 408:	7c 01       	movw	r14, r24
 40a:	e6 0e       	add	r14, r22
 40c:	f7 1e       	adc	r15, r23
		post[99-*postTurns] = pre[numTurns -1];
 40e:	03 e6       	ldi	r16, 0x63	; 99
 410:	10 e0       	ldi	r17, 0x00	; 0
 412:	2d 91       	ld	r18, X+
 414:	3c 91       	ld	r19, X
 416:	11 97       	sbiw	r26, 0x01	; 1
 418:	a8 01       	movw	r20, r16
 41a:	42 1b       	sub	r20, r18
 41c:	53 0b       	sbc	r21, r19
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	6c 0f       	add	r22, r28
 424:	7d 1f       	adc	r23, r29
 426:	46 0f       	add	r20, r22
 428:	57 1f       	adc	r21, r23
 42a:	f7 01       	movw	r30, r14
 42c:	62 91       	ld	r22, -Z
 42e:	7f 01       	movw	r14, r30
 430:	fa 01       	movw	r30, r20
 432:	60 83       	st	Z, r22
		(*postTurns)++;
 434:	2f 5f       	subi	r18, 0xFF	; 255
 436:	3f 4f       	sbci	r19, 0xFF	; 255
 438:	11 96       	adiw	r26, 0x01	; 1
 43a:	3c 93       	st	X, r19
 43c:	2e 93       	st	-X, r18
			post[99 - *postTurns] = three;
			(*postTurns)++;
			numTurns--;
		}
	}
	while(numTurns > 0) {
 43e:	e8 16       	cp	r14, r24
 440:	f9 06       	cpc	r15, r25
 442:	39 f7       	brne	.-50     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		post[99-*postTurns] = pre[numTurns -1];
		(*postTurns)++;
		numTurns--;
	}
	return post;
}
 444:	ce 01       	movw	r24, r28
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	cc 59       	subi	r28, 0x9C	; 156
 44a:	df 4f       	sbci	r29, 0xFF	; 255
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	0f 91       	pop	r16
 45e:	ff 90       	pop	r15
 460:	ef 90       	pop	r14
 462:	df 90       	pop	r13
 464:	cf 90       	pop	r12
 466:	08 95       	ret

00000468 <main>:
ISR(BADISR_vect) {
	return;
}

int main(void)
{
 468:	6f 92       	push	r6
 46a:	7f 92       	push	r7
 46c:	8f 92       	push	r8
 46e:	9f 92       	push	r9
 470:	af 92       	push	r10
 472:	bf 92       	push	r11
 474:	cf 92       	push	r12
 476:	df 92       	push	r13
 478:	ef 92       	push	r14
 47a:	ff 92       	push	r15
 47c:	0f 93       	push	r16
 47e:	1f 93       	push	r17
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	00 d0       	rcall	.+0      	; 0x486 <main+0x1e>
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
	uint8_t hasBeenSolved = eeprom_read_byte((uint8_t*)0);
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <eeprom_read_byte>
 492:	18 2f       	mov	r17, r24
	configPWM();
 494:	0e 94 03 01 	call	0x206	; 0x206 <configPWM>
	pwmOn();
 498:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <pwmOn>
	
	if(hasBeenSolved == KEY ) {
 49c:	15 30       	cpi	r17, 0x05	; 5
 49e:	09 f0       	breq	.+2      	; 0x4a2 <main+0x3a>
 4a0:	3f c1       	rjmp	.+638    	; 0x720 <main+0x2b8>
		stepCounter = eeprom_read_byte((uint8_t *)2);
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <eeprom_read_byte>
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <stepCounter+0x1>
 4b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <stepCounter>
		numSolvedSteps = eeprom_read_byte((uint8_t*)1);
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 1f 05 	call	0xa3e	; 0xa3e <eeprom_read_byte>
 4bc:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <numSolvedSteps>
		eeprom_read_block(solvedSteps, (uint8_t *) 4, numSolvedSteps);
 4c0:	48 2f       	mov	r20, r24
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	64 e0       	ldi	r22, 0x04	; 4
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	87 e0       	ldi	r24, 0x07	; 7
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	0e 94 0f 05 	call	0xa1e	; 0xa1e <eeprom_read_block>
		int stepNum = 0;
		eeprom_read_block(testSteps, (uint8_t *) 100, 100);
 4d0:	44 e6       	ldi	r20, 0x64	; 100
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	64 e6       	ldi	r22, 0x64	; 100
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	89 e7       	ldi	r24, 0x79	; 121
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	0e 94 0f 05 	call	0xa1e	; 0xa1e <eeprom_read_block>
	
	if(hasBeenSolved == KEY ) {
		stepCounter = eeprom_read_byte((uint8_t *)2);
		numSolvedSteps = eeprom_read_byte((uint8_t*)1);
		eeprom_read_block(solvedSteps, (uint8_t *) 4, numSolvedSteps);
		int stepNum = 0;
 4e0:	e1 2c       	mov	r14, r1
 4e2:	f1 2c       	mov	r15, r1
				}
				else if(solvedSteps[stepNum] == 3) {
					turnRight(MEDIUM); // next turn until the middle sensor sees nothing
					uint8_t confirmReading = 0;
					uint8_t lastReading;
					lastReading = lightdark;
 4e4:	0f 2e       	mov	r0, r31
 4e6:	fa e0       	ldi	r31, 0x0A	; 10
 4e8:	cf 2e       	mov	r12, r31
 4ea:	f0 2d       	mov	r31, r0
						getLightDark();
					}
				}
				else if(solvedSteps[stepNum] == 3) {
					turnRight(MEDIUM); // next turn until the middle sensor sees nothing
					uint8_t confirmReading = 0;
 4ec:	b1 2c       	mov	r11, r1
					uint8_t lastReading;
					lastReading = lightdark;
					for(uint8_t i = 0; i < 10; ++i) {
						getLightDark();
						confirmReading += (lightdark == lastReading);
 4ee:	dd 24       	eor	r13, r13
 4f0:	d3 94       	inc	r13
						confirmReading = 0;
						lastReading = lightdark;
						getLightDark();
						for(uint8_t i = 0; i < 10; ++i) {
							getLightDark();
							confirmReading += (lightdark == lastReading);
 4f2:	0b 2d       	mov	r16, r11
						lastReading = lightdark;
					}
					while((lightdark & 0b00000100) && confirmReading < 6) {
						confirmReading = 0;
						lastReading = lightdark;
						getLightDark();
 4f4:	8c 2c       	mov	r8, r12
						for(uint8_t i = 0; i < 10; ++i) {
							getLightDark();
							confirmReading += (lightdark == lastReading);
 4f6:	9d 2c       	mov	r9, r13
 4f8:	ab 2c       	mov	r10, r11
		stepCounter = eeprom_read_byte((uint8_t *)2);
		numSolvedSteps = eeprom_read_byte((uint8_t*)1);
		eeprom_read_block(solvedSteps, (uint8_t *) 4, numSolvedSteps);
		int stepNum = 0;
		eeprom_read_block(testSteps, (uint8_t *) 100, 100);
		while(stepNum < numSolvedSteps) {
 4fa:	0a c1       	rjmp	.+532    	; 0x710 <main+0x2a8>
			getLightDark();
 4fc:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
			
			if(lightdark & 0b00010001) {
 500:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 504:	81 71       	andi	r24, 0x11	; 17
 506:	09 f4       	brne	.+2      	; 0x50a <main+0xa2>
 508:	ec c0       	rjmp	.+472    	; 0x6e2 <main+0x27a>
				// this indicates a possible turn
				uint8_t options = (lightdark & 0b00010001);
 50a:	10 91 78 01 	lds	r17, 0x0178	; 0x800178 <lightdark>
 50e:	11 71       	andi	r17, 0x11	; 17
				forward(FAST);
 510:	80 e8       	ldi	r24, 0x80	; 128
 512:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <forward>
				while(lightdark & 0b00010001) {
 516:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 51a:	81 71       	andi	r24, 0x11	; 17
 51c:	31 f0       	breq	.+12     	; 0x52a <main+0xc2>
					getLightDark();
 51e:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
			
			if(lightdark & 0b00010001) {
				// this indicates a possible turn
				uint8_t options = (lightdark & 0b00010001);
				forward(FAST);
				while(lightdark & 0b00010001) {
 522:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 526:	81 71       	andi	r24, 0x11	; 17
 528:	d1 f7       	brne	.-12     	; 0x51e <main+0xb6>
					getLightDark();
				}
				if((lightdark & 0b00000100) || ((options & 0b00010001) == 0b00010001)) { // the first condition implies that there is the option to go forward; the second condition implies there is the option to go left or right
 52a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 52e:	82 fd       	sbrc	r24, 2
 530:	03 c0       	rjmp	.+6      	; 0x538 <main+0xd0>
 532:	11 31       	cpi	r17, 0x11	; 17
 534:	09 f0       	breq	.+2      	; 0x538 <main+0xd0>
 536:	b5 c0       	rjmp	.+362    	; 0x6a2 <main+0x23a>
					// indicates we need to choose a turn
					uint8_t direction = solvedSteps[stepNum++];
 538:	c7 01       	movw	r24, r14
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	f7 01       	movw	r30, r14
 53e:	e9 5f       	subi	r30, 0xF9	; 249
 540:	fe 4f       	sbci	r31, 0xFE	; 254
 542:	20 81       	ld	r18, Z
					if(solvedSteps[stepNum] == 0) {
 544:	fc 01       	movw	r30, r24
 546:	e9 5f       	subi	r30, 0xF9	; 249
 548:	fe 4f       	sbci	r31, 0xFE	; 254
 54a:	20 81       	ld	r18, Z
 54c:	21 11       	cpse	r18, r1
 54e:	45 c0       	rjmp	.+138    	; 0x5da <main+0x172>
						turnLeft(MEDIUM); // next turn until the middle sensor sees nothing
 550:	80 e3       	ldi	r24, 0x30	; 48
 552:	0e 94 f7 00 	call	0x1ee	; 0x1ee <turnLeft>
						uint8_t confirmReading = 0;
						uint8_t lastReading;
						lastReading = lightdark;
 556:	60 90 78 01 	lds	r6, 0x0178	; 0x800178 <lightdark>
 55a:	7c 2c       	mov	r7, r12
				if((lightdark & 0b00000100) || ((options & 0b00010001) == 0b00010001)) { // the first condition implies that there is the option to go forward; the second condition implies there is the option to go left or right
					// indicates we need to choose a turn
					uint8_t direction = solvedSteps[stepNum++];
					if(solvedSteps[stepNum] == 0) {
						turnLeft(MEDIUM); // next turn until the middle sensor sees nothing
						uint8_t confirmReading = 0;
 55c:	1b 2d       	mov	r17, r11
						uint8_t lastReading;
						lastReading = lightdark;
						for(uint8_t i = 0; i < 10; ++i) {
							getLightDark();
 55e:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
							confirmReading += (lightdark == lastReading);
 562:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <lightdark>
 566:	8d 2d       	mov	r24, r13
 568:	96 11       	cpse	r25, r6
 56a:	80 2f       	mov	r24, r16
 56c:	18 0f       	add	r17, r24
							lastReading = lightdark;
 56e:	60 90 78 01 	lds	r6, 0x0178	; 0x800178 <lightdark>
 572:	7a 94       	dec	r7
					if(solvedSteps[stepNum] == 0) {
						turnLeft(MEDIUM); // next turn until the middle sensor sees nothing
						uint8_t confirmReading = 0;
						uint8_t lastReading;
						lastReading = lightdark;
						for(uint8_t i = 0; i < 10; ++i) {
 574:	71 10       	cpse	r7, r1
 576:	f3 cf       	rjmp	.-26     	; 0x55e <main+0xf6>
 578:	13 c0       	rjmp	.+38     	; 0x5a0 <main+0x138>
							confirmReading += (lightdark == lastReading);
							lastReading = lightdark;
						}
						while((lightdark & 0b00000100) && confirmReading < 6) {
							confirmReading = 0;
							lastReading = lightdark;
 57a:	60 90 78 01 	lds	r6, 0x0178	; 0x800178 <lightdark>
							getLightDark();
 57e:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
 582:	78 2c       	mov	r7, r8
							getLightDark();
							confirmReading += (lightdark == lastReading);
							lastReading = lightdark;
						}
						while((lightdark & 0b00000100) && confirmReading < 6) {
							confirmReading = 0;
 584:	10 2f       	mov	r17, r16
							lastReading = lightdark;
							getLightDark();
							for(uint8_t i = 0; i < 10; ++i) {
								getLightDark();
 586:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
								confirmReading += (lightdark == lastReading);
 58a:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <lightdark>
 58e:	89 2d       	mov	r24, r9
 590:	96 11       	cpse	r25, r6
 592:	8a 2d       	mov	r24, r10
 594:	18 0f       	add	r17, r24
								lastReading = lightdark;
 596:	60 90 78 01 	lds	r6, 0x0178	; 0x800178 <lightdark>
 59a:	7a 94       	dec	r7
						}
						while((lightdark & 0b00000100) && confirmReading < 6) {
							confirmReading = 0;
							lastReading = lightdark;
							getLightDark();
							for(uint8_t i = 0; i < 10; ++i) {
 59c:	71 10       	cpse	r7, r1
 59e:	f3 cf       	rjmp	.-26     	; 0x586 <main+0x11e>
						for(uint8_t i = 0; i < 10; ++i) {
							getLightDark();
							confirmReading += (lightdark == lastReading);
							lastReading = lightdark;
						}
						while((lightdark & 0b00000100) && confirmReading < 6) {
 5a0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 5a4:	82 fd       	sbrc	r24, 2
 5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <main+0x14a>
								getLightDark();
								confirmReading += (lightdark == lastReading);
								lastReading = lightdark;
							}
						}
						while(!(lightdark & 0b00000010)) {
 5a8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 5ac:	81 ff       	sbrs	r24, 1
 5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <main+0x150>
 5b0:	09 c0       	rjmp	.+18     	; 0x5c4 <main+0x15c>
						for(uint8_t i = 0; i < 10; ++i) {
							getLightDark();
							confirmReading += (lightdark == lastReading);
							lastReading = lightdark;
						}
						while((lightdark & 0b00000100) && confirmReading < 6) {
 5b2:	16 30       	cpi	r17, 0x06	; 6
 5b4:	10 f3       	brcs	.-60     	; 0x57a <main+0x112>
 5b6:	f8 cf       	rjmp	.-16     	; 0x5a8 <main+0x140>
								confirmReading += (lightdark == lastReading);
								lastReading = lightdark;
							}
						}
						while(!(lightdark & 0b00000010)) {
							getLightDark();
 5b8:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
								getLightDark();
								confirmReading += (lightdark == lastReading);
								lastReading = lightdark;
							}
						}
						while(!(lightdark & 0b00000010)) {
 5bc:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 5c0:	81 ff       	sbrs	r24, 1
 5c2:	fa cf       	rjmp	.-12     	; 0x5b8 <main+0x150>
							getLightDark();
						}
						// now turn until the middle sensor sees the path again
						while(!(lightdark & 0b00000100)) {
 5c4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 5c8:	82 fd       	sbrc	r24, 2
 5ca:	67 c0       	rjmp	.+206    	; 0x69a <main+0x232>
							getLightDark();
 5cc:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
						}
						while(!(lightdark & 0b00000010)) {
							getLightDark();
						}
						// now turn until the middle sensor sees the path again
						while(!(lightdark & 0b00000100)) {
 5d0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 5d4:	82 ff       	sbrs	r24, 2
 5d6:	fa cf       	rjmp	.-12     	; 0x5cc <main+0x164>
 5d8:	60 c0       	rjmp	.+192    	; 0x69a <main+0x232>
							getLightDark();
						}
						
				} 
				else if(solvedSteps[stepNum] == 2) {
 5da:	fc 01       	movw	r30, r24
 5dc:	e9 5f       	subi	r30, 0xF9	; 249
 5de:	fe 4f       	sbci	r31, 0xFE	; 254
 5e0:	20 81       	ld	r18, Z
 5e2:	22 30       	cpi	r18, 0x02	; 2
 5e4:	79 f4       	brne	.+30     	; 0x604 <main+0x19c>
					forward(SLOW);
 5e6:	85 e1       	ldi	r24, 0x15	; 21
 5e8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <forward>
					while((lightdark & 0b00010001)) {
 5ec:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 5f0:	81 71       	andi	r24, 0x11	; 17
 5f2:	09 f4       	brne	.+2      	; 0x5f6 <main+0x18e>
 5f4:	52 c0       	rjmp	.+164    	; 0x69a <main+0x232>
						getLightDark();
 5f6:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
						}
						
				} 
				else if(solvedSteps[stepNum] == 2) {
					forward(SLOW);
					while((lightdark & 0b00010001)) {
 5fa:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 5fe:	81 71       	andi	r24, 0x11	; 17
 600:	d1 f7       	brne	.-12     	; 0x5f6 <main+0x18e>
 602:	4b c0       	rjmp	.+150    	; 0x69a <main+0x232>
						getLightDark();
					}
				}
				else if(solvedSteps[stepNum] == 3) {
 604:	fc 01       	movw	r30, r24
 606:	e9 5f       	subi	r30, 0xF9	; 249
 608:	fe 4f       	sbci	r31, 0xFE	; 254
 60a:	80 81       	ld	r24, Z
 60c:	83 30       	cpi	r24, 0x03	; 3
 60e:	09 f0       	breq	.+2      	; 0x612 <main+0x1aa>
 610:	44 c0       	rjmp	.+136    	; 0x69a <main+0x232>
					turnRight(MEDIUM); // next turn until the middle sensor sees nothing
 612:	80 e3       	ldi	r24, 0x30	; 48
 614:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <turnRight>
					uint8_t confirmReading = 0;
					uint8_t lastReading;
					lastReading = lightdark;
 618:	60 90 78 01 	lds	r6, 0x0178	; 0x800178 <lightdark>
 61c:	7c 2c       	mov	r7, r12
						getLightDark();
					}
				}
				else if(solvedSteps[stepNum] == 3) {
					turnRight(MEDIUM); // next turn until the middle sensor sees nothing
					uint8_t confirmReading = 0;
 61e:	1b 2d       	mov	r17, r11
					uint8_t lastReading;
					lastReading = lightdark;
					for(uint8_t i = 0; i < 10; ++i) {
						getLightDark();
 620:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
						confirmReading += (lightdark == lastReading);
 624:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <lightdark>
 628:	8d 2d       	mov	r24, r13
 62a:	96 11       	cpse	r25, r6
 62c:	80 2f       	mov	r24, r16
 62e:	18 0f       	add	r17, r24
						lastReading = lightdark;
 630:	60 90 78 01 	lds	r6, 0x0178	; 0x800178 <lightdark>
 634:	7a 94       	dec	r7
				else if(solvedSteps[stepNum] == 3) {
					turnRight(MEDIUM); // next turn until the middle sensor sees nothing
					uint8_t confirmReading = 0;
					uint8_t lastReading;
					lastReading = lightdark;
					for(uint8_t i = 0; i < 10; ++i) {
 636:	71 10       	cpse	r7, r1
 638:	f3 cf       	rjmp	.-26     	; 0x620 <main+0x1b8>
 63a:	13 c0       	rjmp	.+38     	; 0x662 <main+0x1fa>
						confirmReading += (lightdark == lastReading);
						lastReading = lightdark;
					}
					while((lightdark & 0b00000100) && confirmReading < 6) {
						confirmReading = 0;
						lastReading = lightdark;
 63c:	60 90 78 01 	lds	r6, 0x0178	; 0x800178 <lightdark>
						getLightDark();
 640:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
 644:	78 2c       	mov	r7, r8
						getLightDark();
						confirmReading += (lightdark == lastReading);
						lastReading = lightdark;
					}
					while((lightdark & 0b00000100) && confirmReading < 6) {
						confirmReading = 0;
 646:	10 2f       	mov	r17, r16
						lastReading = lightdark;
						getLightDark();
						for(uint8_t i = 0; i < 10; ++i) {
							getLightDark();
 648:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
							confirmReading += (lightdark == lastReading);
 64c:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <lightdark>
 650:	89 2d       	mov	r24, r9
 652:	96 11       	cpse	r25, r6
 654:	8a 2d       	mov	r24, r10
 656:	18 0f       	add	r17, r24
							lastReading = lightdark;
 658:	60 90 78 01 	lds	r6, 0x0178	; 0x800178 <lightdark>
 65c:	7a 94       	dec	r7
					}
					while((lightdark & 0b00000100) && confirmReading < 6) {
						confirmReading = 0;
						lastReading = lightdark;
						getLightDark();
						for(uint8_t i = 0; i < 10; ++i) {
 65e:	71 10       	cpse	r7, r1
 660:	f3 cf       	rjmp	.-26     	; 0x648 <main+0x1e0>
					for(uint8_t i = 0; i < 10; ++i) {
						getLightDark();
						confirmReading += (lightdark == lastReading);
						lastReading = lightdark;
					}
					while((lightdark & 0b00000100) && confirmReading < 6) {
 662:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 666:	82 fd       	sbrc	r24, 2
 668:	05 c0       	rjmp	.+10     	; 0x674 <main+0x20c>
							getLightDark();
							confirmReading += (lightdark == lastReading);
							lastReading = lightdark;
						}
					}
					while(!(lightdark & 0b00001000)) {
 66a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 66e:	83 ff       	sbrs	r24, 3
 670:	04 c0       	rjmp	.+8      	; 0x67a <main+0x212>
 672:	09 c0       	rjmp	.+18     	; 0x686 <main+0x21e>
					for(uint8_t i = 0; i < 10; ++i) {
						getLightDark();
						confirmReading += (lightdark == lastReading);
						lastReading = lightdark;
					}
					while((lightdark & 0b00000100) && confirmReading < 6) {
 674:	16 30       	cpi	r17, 0x06	; 6
 676:	10 f3       	brcs	.-60     	; 0x63c <main+0x1d4>
 678:	f8 cf       	rjmp	.-16     	; 0x66a <main+0x202>
							confirmReading += (lightdark == lastReading);
							lastReading = lightdark;
						}
					}
					while(!(lightdark & 0b00001000)) {
						getLightDark();
 67a:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
							getLightDark();
							confirmReading += (lightdark == lastReading);
							lastReading = lightdark;
						}
					}
					while(!(lightdark & 0b00001000)) {
 67e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 682:	83 ff       	sbrs	r24, 3
 684:	fa cf       	rjmp	.-12     	; 0x67a <main+0x212>
						getLightDark();
					}
					// now turn until the middle sensor sees the path again
					while(!(lightdark & 0b00000100)) {
 686:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 68a:	82 fd       	sbrc	r24, 2
 68c:	06 c0       	rjmp	.+12     	; 0x69a <main+0x232>
						getLightDark();
 68e:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
					}
					while(!(lightdark & 0b00001000)) {
						getLightDark();
					}
					// now turn until the middle sensor sees the path again
					while(!(lightdark & 0b00000100)) {
 692:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 696:	82 ff       	sbrs	r24, 2
 698:	fa cf       	rjmp	.-12     	; 0x68e <main+0x226>
						getLightDark();
					}
				}
			stepNum++;
 69a:	22 e0       	ldi	r18, 0x02	; 2
 69c:	e2 0e       	add	r14, r18
 69e:	f1 1c       	adc	r15, r1
				uint8_t options = (lightdark & 0b00010001);
				forward(FAST);
				while(lightdark & 0b00010001) {
					getLightDark();
				}
				if((lightdark & 0b00000100) || ((options & 0b00010001) == 0b00010001)) { // the first condition implies that there is the option to go forward; the second condition implies there is the option to go left or right
 6a0:	37 c0       	rjmp	.+110    	; 0x710 <main+0x2a8>
						getLightDark();
					}
				}
			stepNum++;
			}
			else if(options == 0b00000001) {
 6a2:	11 30       	cpi	r17, 0x01	; 1
 6a4:	71 f4       	brne	.+28     	; 0x6c2 <main+0x25a>
				turnLeft(FAST);
 6a6:	80 e8       	ldi	r24, 0x80	; 128
 6a8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <turnLeft>
				while(!(lightdark & 0b00000100)) {
 6ac:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 6b0:	82 fd       	sbrc	r24, 2
 6b2:	2e c0       	rjmp	.+92     	; 0x710 <main+0x2a8>
					getLightDark();
 6b4:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
				}
			stepNum++;
			}
			else if(options == 0b00000001) {
				turnLeft(FAST);
				while(!(lightdark & 0b00000100)) {
 6b8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 6bc:	82 ff       	sbrs	r24, 2
 6be:	fa cf       	rjmp	.-12     	; 0x6b4 <main+0x24c>
 6c0:	27 c0       	rjmp	.+78     	; 0x710 <main+0x2a8>
					getLightDark();
				}
			}
			else if(options == 0b00010000) {
 6c2:	10 31       	cpi	r17, 0x10	; 16
 6c4:	29 f5       	brne	.+74     	; 0x710 <main+0x2a8>
				turnRight(FAST);
 6c6:	80 e8       	ldi	r24, 0x80	; 128
 6c8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <turnRight>
				while(!(lightdark & 0b00000100)) {
 6cc:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 6d0:	82 fd       	sbrc	r24, 2
 6d2:	1e c0       	rjmp	.+60     	; 0x710 <main+0x2a8>
					getLightDark();
 6d4:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
					getLightDark();
				}
			}
			else if(options == 0b00010000) {
				turnRight(FAST);
				while(!(lightdark & 0b00000100)) {
 6d8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 6dc:	82 ff       	sbrs	r24, 2
 6de:	fa cf       	rjmp	.-12     	; 0x6d4 <main+0x26c>
 6e0:	17 c0       	rjmp	.+46     	; 0x710 <main+0x2a8>
					getLightDark();
				}
			}
		}
		else {
			if(lightdark & 0b00000100) {
 6e2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 6e6:	82 ff       	sbrs	r24, 2
 6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <main+0x28a>
				forward(MEDIUM);
 6ea:	80 e3       	ldi	r24, 0x30	; 48
 6ec:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <forward>
 6f0:	0f c0       	rjmp	.+30     	; 0x710 <main+0x2a8>
			}
			else if(lightdark & 0b00001000) {
 6f2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 6f6:	83 ff       	sbrs	r24, 3
 6f8:	04 c0       	rjmp	.+8      	; 0x702 <main+0x29a>
				turnRight(SLOW);
 6fa:	85 e1       	ldi	r24, 0x15	; 21
 6fc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <turnRight>
 700:	07 c0       	rjmp	.+14     	; 0x710 <main+0x2a8>
			}
			else if(lightdark & 0b00000010) {
 702:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 706:	81 ff       	sbrs	r24, 1
 708:	03 c0       	rjmp	.+6      	; 0x710 <main+0x2a8>
				turnLeft(SLOW);
 70a:	85 e1       	ldi	r24, 0x15	; 21
 70c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <turnLeft>
		stepCounter = eeprom_read_byte((uint8_t *)2);
		numSolvedSteps = eeprom_read_byte((uint8_t*)1);
		eeprom_read_block(solvedSteps, (uint8_t *) 4, numSolvedSteps);
		int stepNum = 0;
		eeprom_read_block(testSteps, (uint8_t *) 100, 100);
		while(stepNum < numSolvedSteps) {
 710:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <numSolvedSteps>
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	e8 16       	cp	r14, r24
 718:	f9 06       	cpc	r15, r25
 71a:	0c f4       	brge	.+2      	; 0x71e <main+0x2b6>
 71c:	ef ce       	rjmp	.-546    	; 0x4fc <main+0x94>
 71e:	68 c1       	rjmp	.+720    	; 0x9f0 <__stack+0xf1>
					uint8_t * correctedSteps = convertTurns(solvedSteps, correctedSteps, &actualNumSteps);
					
					
					eeprom_write_byte((uint8_t *)1, actualNumSteps);
					eeprom_write_block(correctedSteps,  (uint8_t *)4, actualNumSteps);
					solved = 1;
 720:	88 24       	eor	r8, r8
 722:	83 94       	inc	r8
							checkIfDone();
						}
						
						if(lightdark & 0b00001110) {
							forward(SLOW);
							solvedSteps[stepCounter++] = 2;
 724:	68 94       	set
 726:	77 24       	eor	r7, r7
 728:	71 f8       	bld	r7, 1
					while((lightdark & 0b00000100) && lightdarkcount < 200) { // next turn until the middle sensor sees nothing
						lightdarkcount++;
						getLightDark();
					} 
					lightdarkcount = 0;
					while(!(lightdark & 0b00000010) && lightdarkcount < 250) {
 72a:	0f 2e       	mov	r0, r31
 72c:	fa ef       	ldi	r31, 0xFA	; 250
 72e:	9f 2e       	mov	r9, r31
 730:	f0 2d       	mov	r31, r0
 732:	a1 2c       	mov	r10, r1
					
					turnLeft(FAST);
					
					
					int lightdarkcount = 0; // extra error checking
					while((lightdark & 0b00000100) && lightdarkcount < 200) { // next turn until the middle sensor sees nothing
 734:	0f 2e       	mov	r0, r31
 736:	f8 ec       	ldi	r31, 0xC8	; 200
 738:	bf 2e       	mov	r11, r31
 73a:	f0 2d       	mov	r31, r0
 73c:	c1 2c       	mov	r12, r1
	}
	else {
		/* Replace with your application code */
		while (1) 
		{
			if(solved == 2) {
 73e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <solved>
 742:	82 30       	cpi	r24, 0x02	; 2
 744:	a1 f5       	brne	.+104    	; 0x7ae <main+0x346>
					eeprom_write_byte((uint8_t *)0,KEY); // this indicates it's been solved
 746:	65 e0       	ldi	r22, 0x05	; 5
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 31 05 	call	0xa62	; 0xa62 <eeprom_write_byte>
						
					eeprom_write_block(solvedSteps, (uint8_t *)100, stepCounter);
 750:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <stepCounter>
 754:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <stepCounter+0x1>
 758:	64 e6       	ldi	r22, 0x64	; 100
 75a:	70 e0       	ldi	r23, 0x00	; 0
 75c:	87 e0       	ldi	r24, 0x07	; 7
 75e:	91 e0       	ldi	r25, 0x01	; 1
 760:	0e 94 27 05 	call	0xa4e	; 0xa4e <eeprom_write_block>
					
					eeprom_write_byte((uint8_t *) 2, stepCounter);
 764:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <stepCounter>
 768:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <stepCounter+0x1>
 76c:	82 e0       	ldi	r24, 0x02	; 2
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 31 05 	call	0xa62	; 0xa62 <eeprom_write_byte>
					
					int actualNumSteps = 0;
 774:	1a 82       	std	Y+2, r1	; 0x02
 776:	19 82       	std	Y+1, r1	; 0x01
					uint8_t * correctedSteps = convertTurns(solvedSteps, correctedSteps, &actualNumSteps);
 778:	ae 01       	movw	r20, r28
 77a:	4f 5f       	subi	r20, 0xFF	; 255
 77c:	5f 4f       	sbci	r21, 0xFF	; 255
 77e:	b7 01       	movw	r22, r14
 780:	87 e0       	ldi	r24, 0x07	; 7
 782:	91 e0       	ldi	r25, 0x01	; 1
 784:	0e 94 98 01 	call	0x330	; 0x330 <convertTurns>
 788:	7c 01       	movw	r14, r24
					
					
					eeprom_write_byte((uint8_t *)1, actualNumSteps);
 78a:	69 81       	ldd	r22, Y+1	; 0x01
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	0e 94 31 05 	call	0xa62	; 0xa62 <eeprom_write_byte>
					eeprom_write_block(correctedSteps,  (uint8_t *)4, actualNumSteps);
 794:	49 81       	ldd	r20, Y+1	; 0x01
 796:	5a 81       	ldd	r21, Y+2	; 0x02
 798:	64 e0       	ldi	r22, 0x04	; 4
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	c7 01       	movw	r24, r14
 79e:	0e 94 27 05 	call	0xa4e	; 0xa4e <eeprom_write_block>
					solved = 1;
 7a2:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <solved>
					pwmOff();
 7a6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <pwmOff>
					brake();
 7aa:	0e 94 fe 00 	call	0x1fc	; 0x1fc <brake>
				
			
			}
			
		
			if(!solved) {
 7ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <solved>
 7b2:	81 11       	cpse	r24, r1
 7b4:	13 c1       	rjmp	.+550    	; 0x9dc <__stack+0xdd>
				
				getLightDark();
 7b6:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
			
				if(lightdark & 0b00000001) {
 7ba:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 7be:	80 ff       	sbrs	r24, 0
 7c0:	88 c0       	rjmp	.+272    	; 0x8d2 <main+0x46a>
					uint8_t options = (lightdark & 0b00010100);
 7c2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 7c6:	84 71       	andi	r24, 0x14	; 20
 7c8:	d8 2e       	mov	r13, r24
					forward(FAST); // move past the turn
 7ca:	80 e8       	ldi	r24, 0x80	; 128
 7cc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <forward>
					
					while(lightdark & 0b00000001) {
 7d0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 7d4:	80 ff       	sbrs	r24, 0
 7d6:	06 c0       	rjmp	.+12     	; 0x7e4 <main+0x37c>
						getLightDark();
 7d8:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
			
				if(lightdark & 0b00000001) {
					uint8_t options = (lightdark & 0b00010100);
					forward(FAST); // move past the turn
					
					while(lightdark & 0b00000001) {
 7dc:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <lightdark>
 7e0:	90 fd       	sbrc	r25, 0
 7e2:	fa cf       	rjmp	.-12     	; 0x7d8 <main+0x370>
						getLightDark();
					}
					
					turnLeft(FAST);
 7e4:	80 e8       	ldi	r24, 0x80	; 128
 7e6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <turnLeft>
					
					
					int lightdarkcount = 0; // extra error checking
					while((lightdark & 0b00000100) && lightdarkcount < 200) { // next turn until the middle sensor sees nothing
 7ea:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 7ee:	82 ff       	sbrs	r24, 2
 7f0:	fa c0       	rjmp	.+500    	; 0x9e6 <__stack+0xe7>
 7f2:	0b 2d       	mov	r16, r11
 7f4:	1c 2d       	mov	r17, r12
						lightdarkcount++;
						getLightDark();
 7f6:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
					
					turnLeft(FAST);
					
					
					int lightdarkcount = 0; // extra error checking
					while((lightdark & 0b00000100) && lightdarkcount < 200) { // next turn until the middle sensor sees nothing
 7fa:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <lightdark>
 7fe:	92 ff       	sbrs	r25, 2
 800:	f2 c0       	rjmp	.+484    	; 0x9e6 <__stack+0xe7>
 802:	01 50       	subi	r16, 0x01	; 1
 804:	11 09       	sbc	r17, r1
 806:	b9 f7       	brne	.-18     	; 0x7f6 <main+0x38e>
 808:	ee c0       	rjmp	.+476    	; 0x9e6 <__stack+0xe7>
						lightdarkcount++;
						getLightDark();
					} 
					lightdarkcount = 0;
					while(!(lightdark & 0b00000010) && lightdarkcount < 250) {
 80a:	09 2d       	mov	r16, r9
 80c:	1a 2d       	mov	r17, r10
						lightdarkcount++;
						getLightDark();
 80e:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
					while((lightdark & 0b00000100) && lightdarkcount < 200) { // next turn until the middle sensor sees nothing
						lightdarkcount++;
						getLightDark();
					} 
					lightdarkcount = 0;
					while(!(lightdark & 0b00000010) && lightdarkcount < 250) {
 812:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <lightdark>
 816:	91 ff       	sbrs	r25, 1
 818:	05 c0       	rjmp	.+10     	; 0x824 <main+0x3bc>
						lightdarkcount++;
						getLightDark();
					}
					// now turn until the middle sensor sees the path again
					while(!(lightdark == 0b00000100)) {
 81a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 81e:	84 30       	cpi	r24, 0x04	; 4
 820:	29 f4       	brne	.+10     	; 0x82c <main+0x3c4>
 822:	0a c0       	rjmp	.+20     	; 0x838 <main+0x3d0>
 824:	01 50       	subi	r16, 0x01	; 1
 826:	11 09       	sbc	r17, r1
					while((lightdark & 0b00000100) && lightdarkcount < 200) { // next turn until the middle sensor sees nothing
						lightdarkcount++;
						getLightDark();
					} 
					lightdarkcount = 0;
					while(!(lightdark & 0b00000010) && lightdarkcount < 250) {
 828:	91 f7       	brne	.-28     	; 0x80e <main+0x3a6>
 82a:	f7 cf       	rjmp	.-18     	; 0x81a <main+0x3b2>
						lightdarkcount++;
						getLightDark();
					}
					// now turn until the middle sensor sees the path again
					while(!(lightdark == 0b00000100)) {
						getLightDark();
 82c:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
					while(!(lightdark & 0b00000010) && lightdarkcount < 250) {
						lightdarkcount++;
						getLightDark();
					}
					// now turn until the middle sensor sees the path again
					while(!(lightdark == 0b00000100)) {
 830:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 834:	84 30       	cpi	r24, 0x04	; 4
 836:	d1 f7       	brne	.-12     	; 0x82c <main+0x3c4>
						getLightDark();
					}
					
					if(options) { // only record the turn if there was the 
 838:	dd 20       	and	r13, r13
 83a:	89 f0       	breq	.+34     	; 0x85e <main+0x3f6>
						solvedSteps[stepCounter] = 0; // 0 for left turn
 83c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <stepCounter>
 840:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <stepCounter+0x1>
 844:	e9 5f       	subi	r30, 0xF9	; 249
 846:	fe 4f       	sbci	r31, 0xFE	; 254
 848:	10 82       	st	Z, r1
						++stepCounter;
 84a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stepCounter>
 84e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <stepCounter+0x1>
 852:	01 96       	adiw	r24, 0x01	; 1
 854:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <stepCounter+0x1>
 858:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <stepCounter>
 85c:	ab c0       	rjmp	.+342    	; 0x9b4 <__stack+0xb5>
					}
					
					// finishedturning = 0;
					else if(lightdark & 0b00010000) {
 85e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 862:	84 ff       	sbrs	r24, 4
 864:	a7 c0       	rjmp	.+334    	; 0x9b4 <__stack+0xb5>
						forward(FAST); // first move past the turn
 866:	80 e8       	ldi	r24, 0x80	; 128
 868:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <forward>
						while(lightdark & 0b00010000) {
 86c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 870:	84 ff       	sbrs	r24, 4
 872:	08 c0       	rjmp	.+16     	; 0x884 <main+0x41c>
							getLightDark();
 874:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
							checkIfDone();
 878:	0e 94 6f 01 	call	0x2de	; 0x2de <checkIfDone>
					}
					
					// finishedturning = 0;
					else if(lightdark & 0b00010000) {
						forward(FAST); // first move past the turn
						while(lightdark & 0b00010000) {
 87c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 880:	84 fd       	sbrc	r24, 4
 882:	f8 cf       	rjmp	.-16     	; 0x874 <main+0x40c>
							getLightDark();
							checkIfDone();
						}
						
						if(lightdark & 0b00001110) {
 884:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 888:	8e 70       	andi	r24, 0x0E	; 14
 88a:	99 f0       	breq	.+38     	; 0x8b2 <main+0x44a>
							forward(SLOW);
 88c:	85 e1       	ldi	r24, 0x15	; 21
 88e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <forward>
							solvedSteps[stepCounter++] = 2;
 892:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stepCounter>
 896:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <stepCounter+0x1>
 89a:	9c 01       	movw	r18, r24
 89c:	2f 5f       	subi	r18, 0xFF	; 255
 89e:	3f 4f       	sbci	r19, 0xFF	; 255
 8a0:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <stepCounter+0x1>
 8a4:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <stepCounter>
 8a8:	fc 01       	movw	r30, r24
 8aa:	e9 5f       	subi	r30, 0xF9	; 249
 8ac:	fe 4f       	sbci	r31, 0xFE	; 254
 8ae:	70 82       	st	Z, r7
 8b0:	0d c0       	rjmp	.+26     	; 0x8cc <main+0x464>
						}
						else {
							turnRight(FAST);
 8b2:	80 e8       	ldi	r24, 0x80	; 128
 8b4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <turnRight>
							while(!(lightdark & 0b00000100)) {
 8b8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 8bc:	82 fd       	sbrc	r24, 2
 8be:	06 c0       	rjmp	.+12     	; 0x8cc <main+0x464>
								getLightDark();
 8c0:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
							forward(SLOW);
							solvedSteps[stepCounter++] = 2;
						}
						else {
							turnRight(FAST);
							while(!(lightdark & 0b00000100)) {
 8c4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 8c8:	82 ff       	sbrs	r24, 2
 8ca:	fa cf       	rjmp	.-12     	; 0x8c0 <main+0x458>
								getLightDark();
							}
						}
						getLightDark();
 8cc:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
 8d0:	71 c0       	rjmp	.+226    	; 0x9b4 <__stack+0xb5>
						
					}
				}
				else if(lightdark & 0b00000100) {
 8d2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 8d6:	82 ff       	sbrs	r24, 2
 8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <main+0x47a>
					forward(MEDIUM);
 8da:	80 e3       	ldi	r24, 0x30	; 48
 8dc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <forward>
 8e0:	69 c0       	rjmp	.+210    	; 0x9b4 <__stack+0xb5>
				
				
			
				
			
				else if(lightdark == 0b00000010) {
 8e2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 8e6:	82 30       	cpi	r24, 0x02	; 2
 8e8:	21 f4       	brne	.+8      	; 0x8f2 <main+0x48a>
					turnLeft(MEDIUM);
 8ea:	80 e3       	ldi	r24, 0x30	; 48
 8ec:	0e 94 f7 00 	call	0x1ee	; 0x1ee <turnLeft>
 8f0:	61 c0       	rjmp	.+194    	; 0x9b4 <__stack+0xb5>
				}
				else if(lightdark == 0b00001000) {
 8f2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 8f6:	88 30       	cpi	r24, 0x08	; 8
 8f8:	21 f4       	brne	.+8      	; 0x902 <__stack+0x3>
					turnRight(MEDIUM);
 8fa:	80 e3       	ldi	r24, 0x30	; 48
 8fc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <turnRight>
 900:	59 c0       	rjmp	.+178    	; 0x9b4 <__stack+0xb5>
				}
			
				else if(lightdark == 0x00) {
 902:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 906:	81 11       	cpse	r24, r1
 908:	55 c0       	rjmp	.+170    	; 0x9b4 <__stack+0xb5>
						if(lastLightDark == 0b00000100) {
 90a:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <lastLightDark>
 90e:	84 30       	cpi	r24, 0x04	; 4
 910:	41 f5       	brne	.+80     	; 0x962 <__stack+0x63>
							
							// u-turn
							if(solvedSteps[stepCounter-1] !=1) { // don't double u-turn
 912:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <stepCounter>
 916:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <stepCounter+0x1>
 91a:	ea 5f       	subi	r30, 0xFA	; 250
 91c:	fe 4f       	sbci	r31, 0xFE	; 254
 91e:	80 81       	ld	r24, Z
 920:	81 30       	cpi	r24, 0x01	; 1
 922:	d9 f0       	breq	.+54     	; 0x95a <__stack+0x5b>
								solvedSteps[stepCounter++] = 1;
 924:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stepCounter>
 928:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <stepCounter+0x1>
 92c:	9c 01       	movw	r18, r24
 92e:	2f 5f       	subi	r18, 0xFF	; 255
 930:	3f 4f       	sbci	r19, 0xFF	; 255
 932:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <stepCounter+0x1>
 936:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <stepCounter>
 93a:	fc 01       	movw	r30, r24
 93c:	e9 5f       	subi	r30, 0xF9	; 249
 93e:	fe 4f       	sbci	r31, 0xFE	; 254
 940:	80 82       	st	Z, r8
								forward(FAST);
 942:	80 e8       	ldi	r24, 0x80	; 128
 944:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <forward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 948:	8f e9       	ldi	r24, 0x9F	; 159
 94a:	96 e8       	ldi	r25, 0x86	; 134
 94c:	21 e0       	ldi	r18, 0x01	; 1
 94e:	81 50       	subi	r24, 0x01	; 1
 950:	90 40       	sbci	r25, 0x00	; 0
 952:	20 40       	sbci	r18, 0x00	; 0
 954:	e1 f7       	brne	.-8      	; 0x94e <__stack+0x4f>
 956:	00 c0       	rjmp	.+0      	; 0x958 <__stack+0x59>
 958:	00 00       	nop
								_delay_ms(500);
							}
						turnRight(MEDIUM);
 95a:	80 e3       	ldi	r24, 0x30	; 48
 95c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <turnRight>
 960:	23 c0       	rjmp	.+70     	; 0x9a8 <__stack+0xa9>
							
							
						}
						else if(lastLightDark & 0b00011100) {
 962:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <lastLightDark>
 966:	8c 71       	andi	r24, 0x1C	; 28
 968:	71 f0       	breq	.+28     	; 0x986 <__stack+0x87>
							turnRight(FAST);
 96a:	80 e8       	ldi	r24, 0x80	; 128
 96c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <turnRight>
							while(!(lightdark & 0b00000100)) {
 970:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 974:	82 fd       	sbrc	r24, 2
 976:	18 c0       	rjmp	.+48     	; 0x9a8 <__stack+0xa9>
								getLightDark();
 978:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
							
							
						}
						else if(lastLightDark & 0b00011100) {
							turnRight(FAST);
							while(!(lightdark & 0b00000100)) {
 97c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 980:	82 ff       	sbrs	r24, 2
 982:	fa cf       	rjmp	.-12     	; 0x978 <__stack+0x79>
 984:	11 c0       	rjmp	.+34     	; 0x9a8 <__stack+0xa9>
								getLightDark();
							}
						}
						
						else if(lastLightDark & 0b00000011) {
 986:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <lastLightDark>
 98a:	83 70       	andi	r24, 0x03	; 3
 98c:	69 f0       	breq	.+26     	; 0x9a8 <__stack+0xa9>
							turnLeft(FAST);
 98e:	80 e8       	ldi	r24, 0x80	; 128
 990:	0e 94 f7 00 	call	0x1ee	; 0x1ee <turnLeft>
							while(!(lightdark & 0b00000100)) {
 994:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 998:	82 fd       	sbrc	r24, 2
 99a:	06 c0       	rjmp	.+12     	; 0x9a8 <__stack+0xa9>
								getLightDark();
 99c:	0e 94 8c 01 	call	0x318	; 0x318 <getLightDark>
							}
						}
						
						else if(lastLightDark & 0b00000011) {
							turnLeft(FAST);
							while(!(lightdark & 0b00000100)) {
 9a0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 9a4:	82 ff       	sbrs	r24, 2
 9a6:	fa cf       	rjmp	.-12     	; 0x99c <__stack+0x9d>
							}
						}
					
					
					
						lost = 1;
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <lost+0x1>
 9b0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <lost>

				}
				
			
				if(lightdark != 0x00) {
 9b4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 9b8:	88 23       	and	r24, r24
 9ba:	21 f0       	breq	.+8      	; 0x9c4 <__stack+0xc5>
					lost = 0;
 9bc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <lost+0x1>
 9c0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <lost>
				}
		
		
		
				if(!lost) {
 9c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lost>
 9c8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <lost+0x1>
 9cc:	89 2b       	or	r24, r25
 9ce:	09 f0       	breq	.+2      	; 0x9d2 <__stack+0xd3>
 9d0:	b6 ce       	rjmp	.-660    	; 0x73e <main+0x2d6>
					lastLightDark = lightdark;
 9d2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 9d6:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <lastLightDark>
 9da:	b1 ce       	rjmp	.-670    	; 0x73e <main+0x2d6>
			
			
				
			}
			else {
				pwmOff();
 9dc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <pwmOff>
				brake();
 9e0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <brake>
 9e4:	ac ce       	rjmp	.-680    	; 0x73e <main+0x2d6>
					while((lightdark & 0b00000100) && lightdarkcount < 200) { // next turn until the middle sensor sees nothing
						lightdarkcount++;
						getLightDark();
					} 
					lightdarkcount = 0;
					while(!(lightdark & 0b00000010) && lightdarkcount < 250) {
 9e6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lightdark>
 9ea:	81 ff       	sbrs	r24, 1
 9ec:	0e cf       	rjmp	.-484    	; 0x80a <main+0x3a2>
 9ee:	15 cf       	rjmp	.-470    	; 0x81a <main+0x3b2>
				turnLeft(SLOW);
			}
		}
		
		}
		pwmOff();
 9f0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <pwmOff>
		brake();
 9f4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <brake>
			
	
			}
		}
	return 0;
}
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	0f 90       	pop	r0
 9fe:	0f 90       	pop	r0
 a00:	df 91       	pop	r29
 a02:	cf 91       	pop	r28
 a04:	1f 91       	pop	r17
 a06:	0f 91       	pop	r16
 a08:	ff 90       	pop	r15
 a0a:	ef 90       	pop	r14
 a0c:	df 90       	pop	r13
 a0e:	cf 90       	pop	r12
 a10:	bf 90       	pop	r11
 a12:	af 90       	pop	r10
 a14:	9f 90       	pop	r9
 a16:	8f 90       	pop	r8
 a18:	7f 90       	pop	r7
 a1a:	6f 90       	pop	r6
 a1c:	08 95       	ret

00000a1e <eeprom_read_block>:
 a1e:	dc 01       	movw	r26, r24
 a20:	cb 01       	movw	r24, r22

00000a22 <eeprom_read_blraw>:
 a22:	fc 01       	movw	r30, r24
 a24:	f9 99       	sbic	0x1f, 1	; 31
 a26:	fe cf       	rjmp	.-4      	; 0xa24 <eeprom_read_blraw+0x2>
 a28:	06 c0       	rjmp	.+12     	; 0xa36 <eeprom_read_blraw+0x14>
 a2a:	f2 bd       	out	0x22, r31	; 34
 a2c:	e1 bd       	out	0x21, r30	; 33
 a2e:	f8 9a       	sbi	0x1f, 0	; 31
 a30:	31 96       	adiw	r30, 0x01	; 1
 a32:	00 b4       	in	r0, 0x20	; 32
 a34:	0d 92       	st	X+, r0
 a36:	41 50       	subi	r20, 0x01	; 1
 a38:	50 40       	sbci	r21, 0x00	; 0
 a3a:	b8 f7       	brcc	.-18     	; 0xa2a <eeprom_read_blraw+0x8>
 a3c:	08 95       	ret

00000a3e <eeprom_read_byte>:
 a3e:	f9 99       	sbic	0x1f, 1	; 31
 a40:	fe cf       	rjmp	.-4      	; 0xa3e <eeprom_read_byte>
 a42:	92 bd       	out	0x22, r25	; 34
 a44:	81 bd       	out	0x21, r24	; 33
 a46:	f8 9a       	sbi	0x1f, 0	; 31
 a48:	99 27       	eor	r25, r25
 a4a:	80 b5       	in	r24, 0x20	; 32
 a4c:	08 95       	ret

00000a4e <eeprom_write_block>:
 a4e:	dc 01       	movw	r26, r24
 a50:	cb 01       	movw	r24, r22
 a52:	03 c0       	rjmp	.+6      	; 0xa5a <eeprom_write_block+0xc>
 a54:	2d 91       	ld	r18, X+
 a56:	0e 94 32 05 	call	0xa64	; 0xa64 <eeprom_write_r18>
 a5a:	41 50       	subi	r20, 0x01	; 1
 a5c:	50 40       	sbci	r21, 0x00	; 0
 a5e:	d0 f7       	brcc	.-12     	; 0xa54 <eeprom_write_block+0x6>
 a60:	08 95       	ret

00000a62 <eeprom_write_byte>:
 a62:	26 2f       	mov	r18, r22

00000a64 <eeprom_write_r18>:
 a64:	f9 99       	sbic	0x1f, 1	; 31
 a66:	fe cf       	rjmp	.-4      	; 0xa64 <eeprom_write_r18>
 a68:	1f ba       	out	0x1f, r1	; 31
 a6a:	92 bd       	out	0x22, r25	; 34
 a6c:	81 bd       	out	0x21, r24	; 33
 a6e:	20 bd       	out	0x20, r18	; 32
 a70:	0f b6       	in	r0, 0x3f	; 63
 a72:	f8 94       	cli
 a74:	fa 9a       	sbi	0x1f, 2	; 31
 a76:	f9 9a       	sbi	0x1f, 1	; 31
 a78:	0f be       	out	0x3f, r0	; 63
 a7a:	01 96       	adiw	r24, 0x01	; 1
 a7c:	08 95       	ret

00000a7e <_exit>:
 a7e:	f8 94       	cli

00000a80 <__stop_program>:
 a80:	ff cf       	rjmp	.-2      	; 0xa80 <__stop_program>
